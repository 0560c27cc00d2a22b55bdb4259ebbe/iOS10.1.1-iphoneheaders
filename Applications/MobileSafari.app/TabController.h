/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, December 27, 2016 at 5:08:24 PM Japan Standard Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /Applications/MobileSafari.app/MobileSafari
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MobileSafari/MobileSafari-Structs.h>
#import <MobileSafari/RecentlyClosedTabViewControllerDelegate.h>
#import <MobileSafari/TabBarDelegate.h>
#import <MobileSafari/TabOverviewDelegate.h>
#import <MobileSafari/TabSnapshotCacheDelegate.h>
#import <MobileSafari/TiltedTabViewDelegate.h>

@class BrowserController, NSMutableArray, NSTimer, TabDocument, NSMutableSet, GestureRecognizingBarButtonItem, RecentlyClosedTabViewController, TabSnapshotCache, NSMapTable, TabBar, _SFBrowserSavedState, TiltedTabView, UIButton, TabOverview, NSArray, CloudTabStore, NSString;

@interface TabController : NSObject <RecentlyClosedTabViewControllerDelegate, TabBarDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, TiltedTabViewDelegate> {

	BrowserController* _browserController;
	NSMutableArray* _normalTabDocuments;
	NSMutableArray* _privateTabDocuments;
	NSTimer* _saveStateTimer;
	NSTimer* _stateValidateTimer;
	TabDocument* _tabDocumentBeingHiddenFromTabView;
	NSMutableSet* _tabDocumentsAboutToBeClosedInTiltedTabView;
	GestureRecognizingBarButtonItem* _tiltedTabViewAddTabButton;
	BOOL _tiltedTabViewIsShowing;
	BOOL _tabOverviewIsShowing;
	NSTimer* _updateContinuityTimer;
	BOOL _tabBarItemsFixed;
	BOOL _tabViewItemsFixed;
	RecentlyClosedTabViewController* _recentlyClosedTabController;
	TabSnapshotCache* _snapshotCache;
	BOOL _flushPendingSnapshots;
	/*^block*/id _flushPendingSnapshotsCompletion;
	BOOL _didRestoreCloudTabsForEducationDevice;
	BOOL _didReceiveFirstCloudTabDeviceUpdateNotification;
	TabDocument* _tabDocumentBeingDragged;
	TabDocument* _placeholderTabDocumentBeingDragged;
	NSMapTable* _tabOverviewItemToTabDocumentMap;
	NSMapTable* _tiltedTabItemToTabDocumentMap;
	BOOL _tabExposeButtonIndicatorExcludesBlankDocuments;
	BOOL _privateBrowsingEnabled;
	BOOL _snapshotsAreEnabled;
	BOOL _tabsAreOnLease;
	BOOL _shouldTogglePrivateBrowsingOnSplit;
	TabBar* _tabBar;
	TabDocument* _privateActiveTabDocument;
	TabDocument* _normalActiveTabDocument;
	_SFBrowserSavedState* _savedState;
	TiltedTabView* _tiltedTabView;
	UIButton* _tiltedTabViewPrivateBrowsingButton;
	TabOverview* _tabOverview;
	long long _tabDisplayMode;

}

@property (nonatomic,copy,readonly) NSArray * tabDocuments;                                                //@synthesize normalTabDocuments=_normalTabDocuments - In the implementation block
@property (nonatomic,copy,readonly) NSArray * privateTabDocuments;                                         //@synthesize privateTabDocuments=_privateTabDocuments - In the implementation block
@property (nonatomic,copy,readonly) NSArray * currentTabDocuments; 
@property (nonatomic,copy,readonly) NSArray * allTabDocuments; 
@property (nonatomic,retain) TabDocument * activeTabDocument; 
@property (nonatomic,retain) TabDocument * privateActiveTabDocument;                                       //@synthesize privateActiveTabDocument=_privateActiveTabDocument - In the implementation block
@property (nonatomic,retain) TabDocument * normalActiveTabDocument;                                        //@synthesize normalActiveTabDocument=_normalActiveTabDocument - In the implementation block
@property (nonatomic,readonly) TabDocument * tabDocumentBeingActivated; 
@property (assign,nonatomic) BOOL tabViewDefersActivation; 
@property (nonatomic,readonly) BOOL canCloseTab; 
@property (nonatomic,retain) _SFBrowserSavedState * savedState;                                            //@synthesize savedState=_savedState - In the implementation block
@property (assign,getter=isPrivateBrowsingEnabled,nonatomic) BOOL privateBrowsingEnabled;                  //@synthesize privateBrowsingEnabled=_privateBrowsingEnabled - In the implementation block
@property (nonatomic,readonly) CloudTabStore * cloudTabStore; 
@property (nonatomic,retain,readonly) TabBar * tabBar;                                                     //@synthesize tabBar=_tabBar - In the implementation block
@property (assign,nonatomic) BOOL usesTabBar; 
@property (nonatomic,readonly) RecentlyClosedTabViewController * recentlyClosedTabController; 
@property (assign,nonatomic) BOOL tabExposeButtonIndicatorExcludesBlankDocuments;                          //@synthesize tabExposeButtonIndicatorExcludesBlankDocuments=_tabExposeButtonIndicatorExcludesBlankDocuments - In the implementation block
@property (nonatomic,retain,readonly) TiltedTabView * tiltedTabView;                                       //@synthesize tiltedTabView=_tiltedTabView - In the implementation block
@property (assign,nonatomic) BOOL usesTiltedTabView; 
@property (nonatomic,readonly) NSArray * tiltedTabViewToolbarItems; 
@property (nonatomic,readonly) UIButton * tiltedTabViewPrivateBrowsingButton;                              //@synthesize tiltedTabViewPrivateBrowsingButton=_tiltedTabViewPrivateBrowsingButton - In the implementation block
@property (nonatomic,retain,readonly) TabOverview * tabOverview;                                           //@synthesize tabOverview=_tabOverview - In the implementation block
@property (assign,nonatomic) BOOL usesTabOverview; 
@property (nonatomic,readonly) BOOL tabOverviewIsShowing;                                                  //@synthesize tabOverviewIsShowing=_tabOverviewIsShowing - In the implementation block
@property (nonatomic,readonly) BOOL tabDocumentBeingHiddenFromTabViewExists; 
@property (assign,nonatomic) BOOL snapshotsAreEnabled;                                                     //@synthesize snapshotsAreEnabled=_snapshotsAreEnabled - In the implementation block
@property (assign,nonatomic) long long tabDisplayMode;                                                     //@synthesize tabDisplayMode=_tabDisplayMode - In the implementation block
@property (assign,nonatomic) BOOL tabsAreOnLease;                                                          //@synthesize tabsAreOnLease=_tabsAreOnLease - In the implementation block
@property (assign,nonatomic) BOOL shouldTogglePrivateBrowsingOnSplit;                                      //@synthesize shouldTogglePrivateBrowsingOnSplit=_shouldTogglePrivateBrowsingOnSplit - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(NSArray *)allTabDocuments;
-(NSArray *)privateTabDocuments;
-(NSArray *)tabDocuments;
-(void)updateTabCount;
-(void)restoreEducationDeviceTabs;
-(TabDocument *)activeTabDocument;
-(id)initWithBrowserController:(id)arg1 ;
-(void)insertNewTabDocument:(id)arg1 openedFromTabDocument:(id)arg2 inBackground:(BOOL)arg3 animated:(BOOL)arg4 ;
-(TabOverview *)tabOverview;
-(void)setSavedState:(_SFBrowserSavedState *)arg1 ;
-(void)closeAllOpenTabsAnimated:(BOOL)arg1 exitTabView:(BOOL)arg2 ;
-(TiltedTabView *)tiltedTabView;
-(void)setActiveTabDocument:(TabDocument *)arg1 ;
-(void)_addNewActiveTiltedTabViewTab;
-(void)tiltedTabView:(id)arg1 didSelectItem:(id)arg2 ;
-(void)tabOverview:(id)arg1 closeItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 closeItem:(id)arg2 ;
-(void)closeTabDocument:(id)arg1 animated:(BOOL)arg2 ;
-(BOOL)readState;
-(void)clearBrowserController;
-(void)setTabExposeButtonIndicatorExcludesBlankDocuments:(BOOL)arg1 ;
-(void)setSnapshotsAreEnabled:(BOOL)arg1 ;
-(void)flushPendingSnapshotsWithCompletion:(/*^block*/id)arg1 ;
-(BOOL)usesTabBar;
-(BOOL)usesTabOverview;
-(NSArray *)currentTabDocuments;
-(void)setUsesTiltedTabView:(BOOL)arg1 ;
-(void)setUsesTabOverview:(BOOL)arg1 ;
-(void)updateTiltedTabViewToolbarItems;
-(NSArray *)tiltedTabViewToolbarItems;
-(void)dismissTabViewAnimated:(BOOL)arg1 ;
-(void)setUsesTabBar:(BOOL)arg1 ;
-(void)updateTabBarAnimated:(BOOL)arg1 ;
-(void)openInitialBlankTabDocumentIfNeeded;
-(void)updateTabExposeButtonIndicator;
-(void)updateTabStatesAndValidate:(BOOL)arg1 shouldDeleteEmptyWindow:(BOOL)arg2 ;
-(BOOL)canAddNewTab;
-(RecentlyClosedTabViewController *)recentlyClosedTabController;
-(void)setTabViewDefersActivation:(BOOL)arg1 ;
-(void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2 ;
-(TabDocument *)tabDocumentBeingActivated;
-(void)saveTabDocumentUserActivitySoon:(id)arg1 ;
-(BOOL)canCloseTab;
-(BOOL)tabViewDefersActivation;
-(void)newTab;
-(void)closeTab;
-(void)setActiveTabDocument:(id)arg1 animated:(BOOL)arg2 deferActivation:(BOOL)arg3 ;
-(void)removeSavedStateForTabDocument:(id)arg1 ;
-(void)saveStateForTabDocument:(id)arg1 needsValidate:(BOOL)arg2 ;
-(void)saveBrowserWindowStateOnly;
-(_SFBrowserSavedState *)savedState;
-(void)setActiveTabDocument:(id)arg1 animated:(BOOL)arg2 ;
-(void)openBlankTabDocumentInTabBar;
-(void)insertNewBlankTabDocumentAnimated:(BOOL)arg1 ;
-(BOOL)tabsAreOnLease;
-(BOOL)tabDocumentBeingHiddenFromTabViewExists;
-(id)tabDocumentForURL:(id)arg1 ;
-(BOOL)isPrivateBrowsingEnabled;
-(void)_addTabLongPressRecognized:(id)arg1 ;
-(void)requestSnapshotForTabDocument:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)cancelDragInteraction;
-(BOOL)tabOverviewIsShowing;
-(id)insertDragInteractionPlaceholderTabDocumentForTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 ;
-(void)closeDragInteractionPlaceholderTabDocument;
-(void)recentlyClosedTabViewController:(id)arg1 didSelectTabStateWithData:(id)arg2 ;
-(BOOL)needsCloudTabPeriodicUpdates;
-(void)updateEducationTabsLastSyncDate;
-(void)closeTabDocumentWithURL:(id)arg1 UUID:(id)arg2 ;
-(void)detachTabDocument:(id)arg1 animated:(BOOL)arg2 ;
-(void)acceptDropWithTabDocument:(id)arg1 ;
-(void)mergeAllTabDocumentsFromTabController:(id)arg1 ;
-(void)setTabDisplayMode:(long long)arg1 ;
-(void)saveAllTabsStateWithQuickUpdate:(BOOL)arg1 ;
-(void)saveStateInBackground:(BOOL)arg1 ;
-(void)returnTabDocumentsToTabController:(id)arg1 ;
-(long long)tabDisplayMode;
-(void)setShouldTogglePrivateBrowsingOnSplit:(BOOL)arg1 ;
-(CloudTabStore *)cloudTabStore;
-(id)_blankSnapshot;
-(id)blankSnapshotForTiltedTabView:(id)arg1 ;
-(BOOL)tiltedTabView:(id)arg1 canCloseItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3 ;
-(void)tiltedTabView:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3 ;
-(BOOL)tiltedTabView:(id)arg1 itemHasValidSnapshot:(id)arg2 ;
-(void)tiltedTabViewDidPresent:(id)arg1 ;
-(void)tiltedTabViewDidDismiss:(id)arg1 ;
-(id)currentItemForTiltedTabView:(id)arg1 ;
-(void)tiltedTabViewWillPresent:(id)arg1 ;
-(void)tiltedTabViewWillDismiss:(id)arg1 ;
-(id)tiltedTabView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id*)arg3 ofHeight:(double)arg4 ;
-(id)expectedSuperviewForTiltedTabView:(id)arg1 ;
-(id)snapshotForTiltedTabView:(id)arg1 item:(id)arg2 ;
-(double)tiltedTabView:(id)arg1 headerHeightForItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 animateTopBackdropView:(id)arg2 hidden:(BOOL)arg3 ;
-(void)tiltedTabViewDidUpdateItemVisibilityOrder:(id)arg1 ;
-(void)tiltedTabView:(id)arg1 didSelectNavigationDestination:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3 ;
-(void)tabBar:(id)arg1 closeItem:(id)arg2 ;
-(BOOL)tabBar:(id)arg1 canCloseItem:(id)arg2 ;
-(void)tabBar:(id)arg1 activateItem:(id)arg2 ;
-(BOOL)tabBar:(id)arg1 canMoveItem:(id)arg2 ;
-(BOOL)tabBar:(id)arg1 canBeginDragInteractionForTabBarItem:(id)arg2 ;
-(void)tabBar:(id)arg1 didUpdateDragInteractionPoint:(CGPoint)arg2 ;
-(void)tabBar:(id)arg1 didBeginDragInteractionForTabBarItem:(id)arg2 atPoint:(CGPoint)arg3 dragType:(long long)arg4 ;
-(void)tabBar:(id)arg1 moveItem:(id)arg2 overItem:(id)arg3 ;
-(void)tabBar:(id)arg1 didEndDragInteractionAtPoint:(CGPoint)arg2 ;
-(void)_updateAddTabButtonEnabled;
-(void)_updateHibernatedTabDocumentsSavingState;
-(void)logTabActivationInterval:(double)arg1 forActivationType:(long long)arg2 ;
-(BOOL)usesTiltedTabView;
-(id)_tabDocumentRepresentedByTiltedTabItem:(id)arg1 ;
-(id)_tabDocumentRepresentedByTabOverviewItem:(id)arg1 ;
-(BOOL)tabOverview:(id)arg1 canCloseItem:(id)arg2 ;
-(void)_switchActiveTabDocumentFromTabDocument:(id)arg1 toTabDocument:(id)arg2 ;
-(id)_currentTabs;
-(id)_oldestInactiveTabDocument;
-(void)_closeTabDocument:(id)arg1 animated:(BOOL)arg2 allowAddingToRecentlyClosedTabs:(BOOL)arg3 ;
-(void)_insertTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 inBackground:(BOOL)arg3 animated:(BOOL)arg4 updateUI:(BOOL)arg5 ;
-(BOOL)_makeRoomForNewTabDocument:(id)arg1 ;
-(void)_updateTiltedTabViewItems;
-(void)_updateTabOverviewItems;
-(void)_updateTabBarAnimated:(BOOL)arg1 keepingDocumentVisible:(id)arg2 ;
-(void)_insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(BOOL)arg3 animated:(BOOL)arg4 ;
-(id)_insertNewBlankTabDocumentInBackground:(BOOL)arg1 animated:(BOOL)arg2 ;
-(void)_adoptTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 forPrivateBrowsing:(BOOL)arg3 ;
-(void)_addNewActiveTabOverviewTab;
-(id)_openBlankTabDocument;
-(id)_tabDocumentForURL:(id)arg1 withUUID:(id)arg2 ;
-(void)_closeTabDocument:(id)arg1 animated:(BOOL)arg2 allowAddingToRecentlyClosedTabs:(BOOL)arg3 keepWebViewAlive:(BOOL)arg4 ;
-(void)_setTabBarItemsFixed:(BOOL)arg1 ;
-(BOOL)_shouldFocusPreviousDocumentWhenClosingDocument:(id)arg1 ;
-(void)_logActivationForTab:(id)arg1 ;
-(void)_updateTiltedTabViewItemsAnimated:(BOOL)arg1 ;
-(void)_cloudTabsDidUpdate:(id)arg1 ;
-(void)_suppressSingleEmptyTabIfAppropriate;
-(void)_updateExplanationViewVisibilityAnimated:(BOOL)arg1 ;
-(void)_updateTiltedTabViewItemsWithTransition:(long long)arg1 ;
-(void)_restoreEducationTabsIfNecessaryAnimated:(BOOL)arg1 ;
-(void)_updateSnapshotCacheState;
-(id)_tabDocumentRepresentedByTabBarItem:(id)arg1 ;
-(void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2 ;
-(TabDocument *)privateActiveTabDocument;
-(TabDocument *)normalActiveTabDocument;
-(BOOL)_tabsAreAllEmpty:(id)arg1 ;
-(void)_detachTabDocuments:(id)arg1 nextActiveDocument:(id)arg2 ;
-(void)_adoptTabDocuments:(id)arg1 indicesFromMergingController:(id)arg2 ;
-(void)_adoptActiveTabDocument:(id)arg1 forPrivateBrowsing:(BOOL)arg2 ;
-(id)insertInitialBlankTabDocumentWithPrivateBrowsingIfNeeded:(BOOL)arg1 ;
-(void)setPrivateActiveTabDocument:(TabDocument *)arg1 ;
-(void)setNormalActiveTabDocument:(TabDocument *)arg1 ;
-(void)setTabsAreOnLease:(BOOL)arg1 ;
-(void)_mergeTabDocumentsFromTabController:(id)arg1 forPrivateBrowsingTabs:(BOOL)arg2 ;
-(void)_returnTabDocumentsToTabController:(id)arg1 forPrivateBrowsingTabs:(BOOL)arg2 ;
-(void)togglePrivateBrowsingOnSplitIfNeeded;
-(BOOL)shouldTogglePrivateBrowsingOnSplit;
-(BOOL)_createAndSwitchToNewBlankTabDocumentOpeningCaptiveLandingPageIfNecessary;
-(BOOL)_shouldShowExplanationView;
-(void)_updateSnapshotIdentifiers;
-(void)_updateTabViewCloudTabs;
-(void)dismissTabView;
-(void)_doneLongPressRecognized:(id)arg1 ;
-(void)_updateTiltedTabViewPrivateBrowsingButtonVisibility;
-(void)_updateCloudTabStorePeriodicUpdates;
-(void)_updateTabSnapshotsAnimated:(BOOL)arg1 ;
-(void)_updateSnapshotCacheStateForPresented:(BOOL)arg1 ;
-(BOOL)_canCloseLastTab;
-(void)_addNewActiveTiltedTabViewTabWithNavigationDestination:(id)arg1 ;
-(void)_updateTabSnapshotsWithIdentifier:(id)arg1 animated:(BOOL)arg2 ;
-(void)_updateUserActivityTimerFired;
-(void)_cancelPendingUpdateUserActivityTimer;
-(void)tabOverviewWillPresent:(id)arg1 ;
-(void)tabOverviewDidDismiss:(id)arg1 ;
-(void)tabOverviewDidBeginDismissal:(id)arg1 ;
-(void)tabOverviewDidCancelDismissal:(id)arg1 ;
-(id)currentItemForTabOverview:(id)arg1 ;
-(void)tabOverview:(id)arg1 didSelectItem:(id)arg2 ;
-(void)tabOverview:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3 ;
-(BOOL)tabOverviewCanSwipeToClose:(id)arg1 ;
-(void)tabOverviewDidUpdateItemVisibilityOrder:(id)arg1 ;
-(double)tabOverview:(id)arg1 headerHeightForItem:(id)arg2 ;
-(id)tabOverview:(id)arg1 borrowContentViewForItem:(id)arg2 topBackdropHeight:(double)arg3 ;
-(void)tabOverview:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3 ;
-(id)blankSnapshotForTabOverview:(id)arg1 ;
-(id)snapshotForTabOverview:(id)arg1 item:(id)arg2 ;
-(BOOL)tabOverview:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3 ;
-(void)tabOverview:(id)arg1 didSelectNavigationDestination:(id)arg2 ;
-(void)tabOverview:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3 ;
-(BOOL)tabOverview:(id)arg1 canBeginDragInteractionForItem:(id)arg2 ;
-(void)tabOverview:(id)arg1 didBeginDragInteractionForItem:(id)arg2 point:(CGPoint)arg3 anchorPoint:(CGPoint)arg4 zPosition:(double)arg5 ;
-(void)tabOverview:(id)arg1 didUpdateDragInteractionPoint:(CGPoint)arg2 ;
-(void)tabOverview:(id)arg1 didEndDragInteractionAtPoint:(CGPoint)arg2 ;
-(void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2 ;
-(void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2 ;
-(void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)tabSnapshotCacheDidFinishUpdating:(id)arg1 ;
-(BOOL)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2 ;
-(void)tabBarAddTab:(id)arg1 ;
-(void)tabDocumentDidUpdateUUID:(id)arg1 ;
-(void)invalidateSnapshotForTabDocument:(id)arg1 ;
-(id)cachedContentImageForTabDocument:(id)arg1 ;
-(BOOL)tabExposeButtonIndicatorExcludesBlankDocuments;
-(UIButton *)tiltedTabViewPrivateBrowsingButton;
-(BOOL)snapshotsAreEnabled;
-(void)_saveStateFromTimer:(id)arg1 ;
-(void)_setSaveStateTimer:(id)arg1 ;
-(void)_clearStateValidateTimer;
-(void)_validateSavedState:(id)arg1 ;
-(void)_updateSavedStateValidity:(BOOL)arg1 ;
-(id)_persistentStateDictionaryForTabs:(id)arg1 ;
-(void)_persistAllTabStates:(id)arg1 needsValidate:(BOOL)arg2 ;
-(id)_tabStatesForTabs:(id)arg1 quickUpdate:(BOOL)arg2 ;
-(void)_prepareBrowserWindowDataIncludingTabState:(BOOL)arg1 forQuickUpdate:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(void)saveStateInBackground:(BOOL)arg1 needsValidate:(BOOL)arg2 ;
-(void)_restorePersistentDocumentState:(id)arg1 into:(id)arg2 withCurrentActiveDocument:(id)arg3 activeDocumentIsValid:(BOOL)arg4 restoredActiveDocumentIndex:(unsigned long long)arg5 ;
-(void)_removeCurrentBackForwardItemFromTabDocument:(id)arg1 ;
-(void)setStateNeedsSaved;
-(void)dealloc;
-(TabBar *)tabBar;
-(void)setPrivateBrowsingEnabled:(BOOL)arg1 ;
@end

