/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, December 27, 2016 at 4:44:18 PM Japan Standard Time
* Operating System: Version 10.1.1 (Build 14B150)
* Image Source: /System/Library/VideoProcessors/StereoFusion.videoprocessor
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol MTLComputePipelineState, MTLTexture, MTLBuffer;
#import <StereoFusion.videoprocessor/StereoFusion.videoprocessor-Structs.h>
@interface SparseRenderingMetalCtx : NSObject {

	id<MTLComputePipelineState> _minMax_kernel;
	id<MTLComputePipelineState> _minMax_output_kernel;
	id<MTLComputePipelineState> _quantize_kernel;
	id<MTLComputePipelineState> _simplelens_kernel;
	id<MTLComputePipelineState> _scale_pp_params_kernel;
	id<MTLComputePipelineState> _preprocess_kernel;
	id<MTLComputePipelineState> _mipmap_kernel;
	id<MTLComputePipelineState> _clearNEHistogram_kernel;
	id<MTLComputePipelineState> _noiseDownsample_kernel;
	id<MTLComputePipelineState> _noiseEstimation_kernel;
	id<MTLComputePipelineState> _noisePercentile_kernel;
	id<MTLComputePipelineState> _sample_cr_kernel;
	id<MTLComputePipelineState> _sample_ap_kernel;
	id<MTLComputePipelineState> _sample_ex_kernel;
	id<MTLComputePipelineState> _sample_arp_kernel;
	id<MTLComputePipelineState> _luma_painting_kernel;
	id<MTLTexture> _quantized_tex;
	id<MTLTexture> _preprocessed_tex;
	id<MTLTexture> _lowRes_tex;
	id<MTLTexture> _halfLuma_tex;
	id<MTLTexture> _preprocessed_mipmap_tex[8];
	id<MTLBuffer> _noiseEstLumaHistogram_buf;
	id<MTLBuffer> _noiseEstChromaHistogram_buf;
	id<MTLBuffer> _minMaxAtomic_buf;
	id<MTLBuffer> _minMaxResult_buf;
	id<MTLBuffer> _preprocParams_buf;
	id<MTLBuffer> _noiseLevels_buf;
	id<MTLTexture> _lumaNoise_tex;
	id<MTLTexture> _chromaNoise_tex;
	SCD_Struct_Sp44 _minMax_tgSize;
	SCD_Struct_Sp44 _minMax_gridSize;
	SCD_Struct_Sp44 _quantize_tgSize;
	SCD_Struct_Sp44 _quantize_gridSize;
	SCD_Struct_Sp44 _preprocess_tgSize;
	SCD_Struct_Sp44 _preprocess_gridSize;
	SCD_Struct_Sp44 _noiseEst_tgSize;
	SCD_Struct_Sp44 _noiseEst_gridSize;
	SCD_Struct_Sp44 _render_tgSize;
	SCD_Struct_Sp44 _render_gridSize;
	SCD_Struct_Sp44 _lumaPaint_tgSize;
	SCD_Struct_Sp44 _lumaPaint_gridSize;
	SCD_Struct_Sp44 _mipMap_tgSize[7];
	SCD_Struct_Sp44 _mipMap_gridSize[7];
	bleeding_equation_params _bleeding_params;
	rendering_config_params _config_params;
	simple_lens_model_params _simple_lens_params;

}

@property (assign,nonatomic) simple_lens_model_params simple_lens_params;              //@synthesize simple_lens_params=_simple_lens_params - In the implementation block
@property (assign,nonatomic) bleeding_equation_params bleeding_params;                 //@synthesize bleeding_params=_bleeding_params - In the implementation block
@property (assign,nonatomic) rendering_config_params config_params;                    //@synthesize config_params=_config_params - In the implementation block
-(int)validateInputsWithMTLObject:(id)arg1 inputLuma:(id)arg2 inputChroma:(id)arg3 blurMap:(id)arg4 outputLuma:(id)arg5 outputChroma:(id)arg6 ;
-(int)enqueueShiftMapQuantizeWithCommandBuffer:(id)arg1 blurMap:(id)arg2 ;
-(int)enqueueSimpleLensModelWithCommandBuffer:(id)arg1 blurMap:(id)arg2 ;
-(int)enqueuePreProcessingWithCommandBuffer:(id)arg1 luma:(id)arg2 chroma:(id)arg3 ;
-(int)enqueueNoiseEstimationWithCommandBuffer:(id)arg1 luma:(id)arg2 chroma:(id)arg3 ;
-(int)enqueueMipMapGenerationWithCommandBuffer:(id)arg1 ;
-(int)enqueueRenderingWithCommandBuffer:(id)arg1 inputLuma:(id)arg2 inputChroma:(id)arg3 outputChroma:(id)arg4 ;
-(int)enqueueLumaPaintingWithCommandBuffer:(id)arg1 inputLuma:(id)arg2 outputLuma:(id)arg3 ;
-(int)enqueuePreProcessingWithCommandBuffer:(id)arg1 luma:(id)arg2 chroma:(id)arg3 blurRadiusOffset:(float)arg4 blurRadiusScale:(float)arg5 ;
-(id)initWithMetalDevice:(id)arg1 MetalLibrary:(id)arg2 ;
-(int)allocateResourcesForInputWidth:(unsigned long long)arg1 inputHeight:(unsigned long long)arg2 blurmapWidth:(unsigned long long)arg3 blurmapHeight:(unsigned long long)arg4 ;
-(void)deallocateResources;
-(int)enqueueRenderingWithCommandQueue:(id)arg1 inputLuma:(id)arg2 inputChroma:(id)arg3 blurMap:(id)arg4 outputLuma:(id)arg5 outputChroma:(id)arg6 ;
-(int)enqueueRenderingWithCommandQueue:(id)arg1 inputLuma:(id)arg2 inputChroma:(id)arg3 blurMap:(id)arg4 outputLuma:(id)arg5 outputChroma:(id)arg6 blurRadiusOffset:(float)arg7 blurRadiusScale:(float)arg8 ;
-(simple_lens_model_params)simple_lens_params;
-(void)setSimple_lens_params:(simple_lens_model_params)arg1 ;
-(bleeding_equation_params)bleeding_params;
-(void)setBleeding_params:(bleeding_equation_params)arg1 ;
-(rendering_config_params)config_params;
-(void)setConfig_params:(rendering_config_params)arg1 ;
@end

